@page "/"
@page "/dashboard"
@using CarSpec.Models
@inject CarSpec.Services.Obd.ObdConnectionService ObdService
@inject IJSRuntime JS
@implements IAsyncDisposable

<h1 class="cs-title" style="font-size:26px;margin:6px 0 12px">🚗 CarSpec Dashboard</h1>

<div class="cs-controls">
  <div class="cs-badge cs-badge--panel">
    <span class="label">Mode:</span>
    <span class="cs-pill @(GetModeClass())">@GetModeText()</span>
  </div>

  @if (!ObdService.IsAdapterConnected)
  {
      <button class="cs-btn primary" @onclick="SwitchToLive">
          🔌 Connect to OBD
      </button>
  }
  else if (ObdService.IsAdapterConnected && !ObdService.IsEcuConnected)
  {
      <button class="cs-btn btn-secondary" @onclick="ReconnectEcu">
          🔁 Reconnect ECU
      </button>
      <button class="cs-btn btn-secondary" @onclick="Disconnect">
            🔌 Disconnect OBD
      </button>
  }
  else if (ObdService.IsEcuConnected)
  {
      <button class="cs-btn btn-secondary" @onclick="Disconnect">
            🔌 Disconnect OBD
      </button>
  }
</div>

@if (carData is null)
{
    <p>Waiting for data...</p>
}
else
{
    <div class="cs-grid" style="margin-bottom:18px">
        <!-- RPM Gauge -->
        <section class="cs-card wide">
          <h3>RPM</h3>
          <div style="display:grid;place-items:center">
            <div class="gauge-host">
              <canvas id="rpmGauge" width="280" height="280" style="display:block;"></canvas>
            </div>
          </div>
        </section>

        <!-- Drive stats -->
        <section class="cs-card">
            <h3>Drive</h3>
            <div class="cs-stat">
                <span class="label">Speed</span>
                <span class="value">@carData.Speed mph</span>
            </div>
            <div class="cs-stat">
                <span class="label">RPM</span>
                <span class="value">@carData.RPM rpm</span>
            </div>
            <div class="cs-stat good">
                <span class="label">Throttle</span>
                <span class="value">@carData.ThrottlePercent %</span>
            </div>
            <div class="cs-stat warn">
                <span class="label">Fuel Level</span>
                <span class="value">@carData.FuelLevelPercent %</span>
            </div>
        </section>

        <!-- Temps -->
        <section class="cs-card">
            <h3>Temps</h3>
            <div class="cs-stat @(carData.CoolantTempF > 220 ? "bad" : "good")">
                <span class="label">Coolant</span>
                <span class="value">@carData.CoolantTempF °F</span>
            </div>
            <div class="cs-stat">
                <span class="label">Oil</span>
                <span class="value">@carData.OilTempF °F</span>
            </div>
            <div class="cs-stat">
                <span class="label">Intake Air</span>
                <span class="value">@carData.IntakeTempF °F</span>
            </div>
            <div class="cs-stat">
                <span class="label">Last Updated</span>
                <span class="value">@carData.LastUpdated.ToLongTimeString()</span>
            </div>
        </section>

        <!-- Log -->
        <section class="cs-card full">
            <h3>Log</h3>
            <pre style="background:#0c0f14;border-radius:12px;padding:12px;border:1px solid var(--card-border);max-height:220px;overflow:auto;font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;color:#7CFF6B">
                @string.Join("\n", outputLog.TakeLast(120))
            </pre>
        </section>
    </div>
}

@code {
    private CarData? carData;
    private readonly List<string> outputLog = new();
    private CancellationTokenSource? _simCts;
    private readonly TimeSpan _simTick = TimeSpan.FromSeconds(1);
    private bool _liveLoopRunning;

    // JS module for the canvas gauge
    private IJSObjectReference? gaugeModule;
    private bool gaugeReady;
    const int MaxRpm = 8000;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the module and init the gauge
            gaugeModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/carspec.gauges.js");
            await gaugeModule.InvokeVoidAsync(
                "initRpmGauge", "rpmGauge", carData?.RPM ?? 0, MaxRpm,
                new { startAngle = 46, ticksAngle = 270, units = "rpm", subUnits = "x1000" }
            );
            gaugeReady = true;
        }
    }

    // Push new RPM to the gauge
    private async Task SafeSetRpmAsync()
    {
        if (gaugeReady && gaugeModule is not null)
            await gaugeModule.InvokeVoidAsync("setRpm", carData?.RPM ?? 0);
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to unified service log
        ObdService.OnLog += HandleLog;

        Log("🚀 Starting CarSpec Dashboard...");

        try
        {
            carData = await ObdService.GetLatestDataAsync();
        }
        catch (Exception ex)
        {
            Log($"[Error] Failed to get initial data: {ex.Message}");
        }

        // Start simulation producer; it only updates while SimulationMode == true
        StartSimulationLoop();
    }

    private void StartSimulationLoop()
    {
        _simCts?.Cancel();
        _simCts = new CancellationTokenSource();
        var token = _simCts.Token;

        _ = Task.Run(async () =>
        {
            while (!token.IsCancellationRequested)
            {
                try
                {
                    if (ObdService.SimulationMode)
                    {
                        carData = CarData.Simulated();
                        await InvokeAsync(async () =>
                        {
                            await SafeSetRpmAsync();
                            StateHasChanged();
                        });
                    }
                }
                catch { /* ignore */ }

                try { await Task.Delay(_simTick, token); } catch { }
            }
        }, token);
    }

    private async Task SwitchToLive()
    {
        if (_liveLoopRunning) return; // Gaurd against multi clicking
        Log("🔌 Attempting to connect to Live OBD-II...");

        bool connected = await ObdService.AutoConnectAsync();
        if (connected)
        {
            Log("✅ Connected to OBD-II adapter successfully!");
            await ZeroOutDataAsync();

            // Start live data loop after ECU confirmation
            if (!ObdService.SimulationMode && ObdService.IsEcuConnected)
            {
                Log("📡 Starting live ECU data stream...");
                _liveLoopRunning = true;

                _ = ObdService.StartLiveDataLoopAsync(cd =>
                {
                    carData = cd;

                    InvokeAsync(async () =>
                    {
                        await SafeSetRpmAsync(); // This keeps the RPM gauge in sync
                        StateHasChanged();
                    });
                });
            }
            else
            {
                Log("⚠️ ECU not responding — staying in Simulation Mode.");
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task ReconnectEcu()
    {
        if (await ObdService.TryReconnectEcuAsync())
        {
            Log("✅ ECU is now online!");
            await ZeroOutDataAsync();

            if (!ObdService.SimulationMode && ObdService.IsEcuConnected && !_liveLoopRunning)
            {
                Log("📡 Resuming live ECU data stream...");
                _liveLoopRunning = true;

                _ = ObdService.StartLiveDataLoopAsync(cd =>
                {
                    carData = cd;

                    InvokeAsync(async () =>
                    {
                        await SafeSetRpmAsync();
                        StateHasChanged();
                    });
                });
            }
        }
        else
        {
            Log("❌ ECU still offline.");
        }
    }

    private async Task Disconnect()
    {
        _liveLoopRunning = false;
        await ObdService.Disconnect();
        await InvokeAsync(StateHasChanged);
        ObdService.SimulationMode = true;
    }

    private void HandleLog(string message)
    {
        outputLog.Add($"[{DateTime.Now:T}] {message}");
        if (outputLog.Count > 500)
            outputLog.RemoveAt(0);

        InvokeAsync(StateHasChanged);
    }

    private void Log(string message) => HandleLog(message);

    private string GetModeText() =>
        ObdService.IsConnecting ? "Connecting..." :
        ObdService.IsEcuConnected ? "Live ECU Connected" :
        (ObdService.IsAdapterConnected ? "Adapter Connected (ECU Offline)" :
        ObdService.SimulationMode ? "Simulation Mode" : "Disconnected");

    private string GetModeClass() =>
        ObdService.IsConnecting ? "is-connecting" :
        ObdService.IsEcuConnected ? "is-live" :
        (ObdService.IsAdapterConnected ? "is-adapter" :
        ObdService.SimulationMode ? "is-sim" : "is-disc");

     private async Task ZeroOutDataAsync()
     {
         carData ??= new CarData();
         carData.RPM = 0;
         carData.Speed = 0;
         carData.ThrottlePercent = 0;
         carData.FuelLevelPercent = 0;
         carData.CoolantTempF = 0;
         carData.OilTempF = 0;
         carData.IntakeTempF = 0;
         carData.LastUpdated = DateTime.Now;

         await SafeSetRpmAsync();
         await InvokeAsync(StateHasChanged);
     }


    public async ValueTask DisposeAsync()
    {
        _simCts?.Cancel();
        _simCts = null;

        if (gaugeModule is not null)
        {
            try { await gaugeModule.InvokeVoidAsync("disposeRpmGauge"); } catch { }
            await gaugeModule.DisposeAsync();
        }
        ObdService.OnLog -= HandleLog;
    }
}