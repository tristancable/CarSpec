@page "/dashboard"
@using CarSpec.Models
@inject CarSpec.Services.ObdConnectionService ObdService

<h1 class="text-3xl font-bold mb-4">🚗 CarSpec Dashboard</h1>

<div class="mb-3">
    <strong>Mode:</strong>
    <span class="badge @(ObdService.SimulationMode ? "bg-yellow-400 text-black" : "bg-green-500 text-white")">
        @(ObdService.SimulationMode ? "Simulation" : "Live OBD-II")
    </span>
</div>

@if (ObdService.SimulationMode)
{
    <button class="btn btn-primary mb-4" @onclick="SwitchToLive">🔌 Switch to Live OBD</button>
}
else if (!ObdService.IsConnected)
{
    <button class="btn btn-primary mb-4" @onclick="ConnectAsync">🔌 Connect to OBD</button>
}

@if (carData is null)
{
    <p>Waiting for data...</p>
}
else
{
    <div class="grid grid-cols-2 gap-4 mb-6">
        <div>Speed: @carData.Speed mph</div>
        <div>RPM: @carData.RPM</div>
        <div>Throttle: @carData.ThrottlePercent %</div>
        <div>Fuel Level: @carData.FuelLevelPercent %</div>
        <div>Oil Temp: @carData.OilTempF °F</div>
        <div>Coolant Temp: @carData.CoolantTempF °F</div>
        <div>Intake Air: @carData.IntakeTempF °F</div>
        <div>Last Updated: @carData.LastUpdated.ToLongTimeString()</div>
    </div>
}

<!-- ✅ Live Output Log -->
<div class="border border-gray-500 rounded-lg p-3 bg-gray-900 text-green-400 font-mono text-sm h-48 overflow-y-auto">
    <div><strong>📡 OBD-II Log</strong></div>
    @foreach (var log in outputLog)
    {
        <div>@log</div>
    }
</div>

@code {
    private CarData? carData;
    private List<string> outputLog = new();

    protected override async Task OnInitializedAsync()
    {
        Log("Starting dashboard in Simulation Mode...");
        ObdService.SimulationMode = true;

        carData = await ObdService.GetLatestDataAsync();

        // Background refresh loop
        _ = Task.Run(async () =>
        {
            while (true)
            {
                try
                {
                    carData = await ObdService.GetLatestDataAsync();
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex)
                {
                    Log($"[Error] {ex.Message}");
                }
                await Task.Delay(1000);
            }
        });
    }

    private async Task SwitchToLive()
    {
        Log("Attempting to switch to Live OBD-II...");
        ObdService.SimulationMode = false;

        bool connected = await ObdService.AutoConnectAsync();
        if (connected)
        {
            Log("✅ Switched to Live OBD-II successfully!");
            carData = await ObdService.GetLatestDataAsync();
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            Log("❌ Could not connect — reverting to Simulation Mode.");
            ObdService.SimulationMode = true;
        }
    }

    private async Task ConnectAsync()
    {
        Log("Attempting manual connection to OBD-II device...");
        bool connected = await ObdService.ConnectAsync("VEEPEAK");

        if (connected)
        {
            Log("✅ Connected successfully to Live OBD-II!");
            carData = await ObdService.GetLatestDataAsync();
            StateHasChanged();
        }
        else
        {
            Log("❌ Connection failed — staying in Simulation Mode.");
        }
    }

    private void Log(string message)
    {
        outputLog.Add($"[{DateTime.Now:T}] {message}");
        if (outputLog.Count > 100)
            outputLog.RemoveAt(0);

        InvokeAsync(StateHasChanged);
    }
}